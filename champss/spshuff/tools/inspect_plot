#!/usr/bin/env python3

import spshuff
from ch_frb_l1 import rpc_client
from spshuff.l1_io import FileHeader, ChunkHeader, Chunk, IntensityFile

import numpy as np
import matplotlib
matplotlib.use('Agg')
import matplotlib.pyplot as plt

import argparse
import os
from errno import EEXIST


def mkdir_p(path):
    try:
        os.makedirs(path)
    except OSError as exc: # Python >2.5
        if exc.errno == EEXIST and os.path.isdir(path):
            pass
        else: raise


class TextBuffer:
    def __init__(self, path, mode='a'):
        self.path = path
        self.mode = mode
        self.buffer = ''

    def add_string(self, string):
        self.buffer += str(string)

    def flush(self):
        with open(self.path, self.mode) as f:
            f.write(self.buffer)


def get_fname(path, suffix=''):
    fname = path.split(os.path.sep)[-1]
    if '.' in fname:
        fname = '.'.join(fname.split('.')[:-1])
    fname = fname + '.' + suffix
    return fname


def get_ext(path):
    return path.split('.')[-1]


def swap_suffix(path, suffix=''):
    stem = os.sep.join(path.split(os.path.sep)[:-1])
    fname = get_fname(path)
    return os.path.join(stem, fname)


def import_data(path, metabuffer=None):
    ext = get_ext(path)
    chunks = []
    if ext=='msg': #msgpack
        chunk = rpc_client.read_msgpack_file(path)
        rmask = chunk.rfi_mask
        mask = np.repeat(rmask, chunk.nupfreq, axis=0)
        data = chunk.data # scale/offset arrays useful?
        # use chunk.decode() for scaled data
        means = np.mean(data, axis=1)
        stdevs = np.std(data, axis=1)
        chunks.append((data, mask, means, stdevs))

    elif ext=='dat': #spshuff
        with open(path,'rb') as f:
            ifile = IntensityFile.from_file(f)

        if metabuffer:
            metabuffer.add_string(ifile)

        ichunks = ifile.get_chunks()
        for ichunk in ichunks:    
            chunks.append((ichunk.data, ichunk.bad_mask, 
                           ichunk.means, np.sqrt(ichunk.variance)))
    if metabuffer:
        metabuffer.flush()

    return chunks


def make_intensity_plot(inpath, outdir, tb=None):
    chunks = import_data(inpath, tb)
    ichunk = 0
    for chunk in chunks:
        data, mask, means, stdevs = chunk
        dshape = data.shape
        mshape = mask.shape

        fig = plt.figure(figsize=(8.5, 11), dpi=300)

        ax0 = fig.add_subplot(2,1,1)
        ax1 = fig.add_subplot(2,2,3)
        ax1.set_ylabel('ichan')
        ax2 = fig.add_subplot(2,2,4, sharey=ax1)
        ax2.get_yaxis().set_visible(False)
        ax1.set_xlabel('itime')
        ax2.set_xlabel('itime')
        data_un = data * stdevs[:, None] + means[:, None] #unnormalized
        spectrum = np.sum(data_un, axis=1)

        ax0.plot(spectrum)
        ax0.set_xlabel('ichan')
        ax0.set_ylabel('integrated power (arbitrary)')
        ax1.imshow(data, aspect=dshape[1]/dshape[0])
        ax2.imshow(mask, aspect=mshape[1]/mshape[0], vmin=0, vmax=1)
        plt.savefig(os.path.join(outdir, get_fname(inpath) + '_chunk_%i.pdf' % ichunk))
        plt.close()
        ichunk += 1


def get_files(parent):
    files = []
    for f in os.listdir(parent):
        if ".dat" in f or ".msg" in f:
            files += [os.path.join(parent, f),]
    return files


def plot_files(indir, outdir):
    files = get_files(indir)
    for f in files:
        print("plotting file:",f)
        tb = None
        if get_ext(f) == 'dat':
            tb = TextBuffer(os.path.join(outdir, get_fname(f, 'txt'))) # text buffer for metadata file
        make_intensity_plot(f, outdir, tb)


parser = argparse.ArgumentParser(description='Plot spshuff or msgpack L1 data dumps')
parser.add_argument('indir', type=str, help='.dat or .msg files to plot')
parser.add_argument('plotdir', type=str, help='destination directory to save plots (need not exist)')


if __name__ == "__main__":
    args = parser.parse_args()
    indir = args.indir
    plotdir = args.plotdir
    mkdir_p(plotdir)
    plot_files(indir, plotdir)
